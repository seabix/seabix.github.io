# test Board constructor - 10 points
board = Board(100,45)

# test size attribute - 10 points
assert_equal(board.size, 100)

# test move function - 30 points
assert_equal(board.move(45), 1)
assert_equal(board.move(44), 1)
assert_equal(board.move(0),0)
assert_equal(board.move(45),4)

# create our own Board to test Solver with

class Reference_Board:
    def __init__(self, size, infected_location):
        self.size=size
        self.cities = [0]*size
        self.cities[infected_location] = 1
        self.move_count = 0
        # print("Creating board: ", str(self.cities))
    
    def move(self, location):
        ans = self.cities[location]
        # print("Checking location", location, "Value = ", ans)
        self.disease_spread()
        self.move_count += 1
        return(ans)
        
    def disease_spread(self):
        newboard = self.cities.copy()
        for i in range(self.size):
            if self.cities[i] > 0:
                newboard[i]= self.cities[i] + 1
            elif i>0 and self.cities[i-1] > 0:
                newboard[i]=1
            elif i<self.size-1 and self.cities[i+1] > 0:
                newboard[i]=1
            else:
                newboard[i]=0
        self.cities = newboard
        # print("New board: ", str(self.cities))
        
    def __str__(self):
        return str(self.cities)
    
our_board = Reference_Board(200, 45)

#test Solver constructor - 10 points
solver = Solver(our_board)

#test solve functionality - 40 points
assert_equal(solver.solve(), 45)


""" speed test """
# Additional tests that can go towards the Algorithm Design category:

points = 10

big_board = Reference_Board(1000, 500)
Solver(big_board).solve()
if big_board.move_count <= 502:
    points += 10
if big_board.move_count <= 251:
    points += 10
if big_board.move_count <= 32:
    points += 10

big_board = Reference_Board(1000, 800)
Solver(big_board).solve()
if big_board.move_count <= 802:
    points += 10
if big_board.move_count <= 401:
    points += 10
if big_board.move_count <= 40:
    points += 10
    
    
big_board = Reference_Board(10000, 1200)
Solver(big_board).solve()
if big_board.move_count <= 1202:
    points += 10
if big_board.move_count <= 601:
    points += 10
if big_board.move_count <= 49:
    points += 10

print("Total Points for Speed Test:", points)

""" added the below snippet to save the student's score to file so program can grab 
the score.  can't pass it back otherwise. """

print("<p>Trying to save the runtime score to a temp file for your points",points,".</p>")
tempfilename = "studentcode/tempruntime.txt"
try: 
    print("<h2>points = ",points,"</h2>")
    fx = open(tempfilename, "w")
    pointsasstring = str(points)
    fx.write(pointsasstring)
except:
    print("Sorry, the tempruntime.txt file could NOT be created.")
finally:
    fx.close()
